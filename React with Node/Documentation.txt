BoilerPlate
	Common Code
	Tools/Script
		create-react-app

create-react-app => script to generate a project
		
npm install -g create-react-app

// Generating Project
create-react-app restaurantkit

create-react-app internal process =>
	create-react-app projectName

Older Approach => 	
	md projectName
	cd projectName
	npm init
	Write files like index.html.. css... index.js and app.js
	npm install react
	npm install react-dom
	npm install react-scripts

Advantages of BoilerPlate scripts
	Code Generation
	
	
npm - Modules
Commands
	add - npm install moduleName
	update - npm update moduleName
	delete - npm uninstall moduleName

1. Installing dependencies one by one
	npm install react
	npm install react-dom

2. Installing multiple dependencies with single command
	npm install react react-dom

Points to remember
1. It installs modules inside node_modules folder.
2. It installs submodules required for that module.
3. In each module, there should be package.json.
4. We will never checkin node_modules folder. So when we download a project from source control, we must run command npm install to install all dependencies.
5. Module can be added using npm install moduleName or add module manually to dependencies object of package.json and run npm install command.
6. save is attribute to be used to insert module into dependencies section of package.json
	npm install react --save
7. save-dev is attribute to be used to insert module into devDependencies section of package.json. These modules I need in development stage only.
	npm install babel --save-dev

	
Installing without BoilerPlate
https://reactjs.org/docs/add-react-to-an-existing-app.html#installing-react


Installing BoilerPlate => create-react-app
https://reactjs.org/docs/add-react-to-a-new-app.html


Creating a Project
Node > 5.8
npx create-react-app projectName
Else 
create-react-app projectName

Running a Project
cd projectName
npm start

https://babeljs.io/docs/editors
Project Editors
	Visual Studio Code => https://code.visualstudio.com/
	Atom
	Nuclide
	

Project - Web
	React
	React Dom
	Index.html

Project - Node
	npm init
	npm install React
	npm install React-Dom
	index.html
	

Project Structure
node_modules => Modules get installed into this folder
package.json
	Scripts
		start => Start of the project using WebPack
		build => to generate bundle which can be deployed directly
		test => running Tests
		eject => it will come out of create-react-app
registerServiceWorker.js
	Caches Images and CSS in browser so that when there is no or less internet, it will load these files from cache for faster access of pages.
	
	
Starting Point
public/index.html
src/index.js

Actual Starting Point 
src/App.js

ES5
var React = require('react');
module.exports = App;

ES6
import React from 'react';
export App; => imported with same reference name
				usually prefered if multiple components
				
export default App; => imported with any reference name
					usually prefered for single component




https://reactjs.org/docs/add-react-to-an-existing-app.html

Downloading Yarn
https://yarnpkg.com/lang/en/docs/install/#windows-stable

Main Project Structure
	src
		components - reusuable components
		containers/pages - pages
		data - static data
		util - utilities
		images - images
	
Stateless Component
	dont use => this keyword
				state keyword
		
Changes from stateful and stateless

Stateful
	export default class LoginView extends Component {
		render(){
			return ( <div> {this.props.title} </div>);
		}
	}
	
Stateless
	export default (props) => {
		return (<div>  {props.title} </div>);
	}
Points
	dont use this keyword
	
Asynchronous process => Process which runs in parallel with main thread but independent of main thread.
		
Promise => to handle asynchronous process

Promise returns 2 things => success, failure

Ex: TakeHelp({ 
				action: 'CollectMoney', 
				amount: 1000
			}).then(callback).catch(callback);
	
	TakeHelp({
		action: 'CollectAndDepositMoney',
		amount: 1000
	}).then(callback).then(callback).catch(callback);
	
// simple get
	fetch('test.com/getStudents')
		.then(response => {})
		.catch(error => {})

// simple post
	var user = { username: 'test@gmail.com', password: 123 }
	fetch('test.com/adduser',{
		method: 'POST',
		data: user
	}).then(cb1)
	  .catch(cb2)
	  
Routing
	BrowserRouter
	HashRouter
	
history.push('home')

// passing params => 
Adv:
	for security purposes, we can use this as params are not shown in query string
Dis:
	Refresh will not work
	
history.push({
	pathname: 'home',
	params: { username: 'Karthik', age: 20 }
});

var params = this.props.location.params;
console.log(params.username + ', with age ' + params.age);


// passing as search params => ie in query string
Adv:
	supports refresh feature

https://github.com/mkrishna2025/Routing
history.push({
	pathname: 'home',
	search: 'username=Karthik&age=20',
});
const queryParams = new URLSearchParams(this.props.location.search);
console.log(queryParams.get('username') + ', with age ' + queryParams.get('age'));

<a href='google.com?username=karthik'>Google</a>

<Link to={{
          pathname: '/google.com',
          search: username=karthik,
          params: { secretAccessKey: '123456' }
        }}> Google </Link>


Life Cycle
	constructor => Default or Initial State
	componentWillMount 
	render => drawing the screen, adding items to the screen
	componentDidMount => backend calls to load data in tables
	componentWillUnMount
	
class RestaurantDemo {
	constructor(props){
		super(props);
		this.state = {
			restaurants: []
		}
	}
	
	componentDidMount(){
		fetch('test.com/loadRestaurants')
			.then(response => return response.json())
			.then(response => {
				var items = response.data;
				this.setState({ restaurants: items });
			}
	}
	
	render(){
		<div>
		{this.state.restaurants.map(.... ) }
		</div>
	}
}

facebook
	default - list
	settings = 

Pending


	Authentication - Local, Google
	
	Redux Introduction 
		
		
		