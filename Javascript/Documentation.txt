// Start - Day 1

// Creating a variable
// Syntax
var variableName = defaultValue;

var x = 10;

Viewing the values inside a variable
// Approach 1
console.log(x); => It prints value to console
// Approach 2
alert(x); => It displays value in alert box

var y;
console.log(y) => it prints undefined ie defaultValue is undefined
y = 20;

function
	Block of code 
	Code is added for re-usability and easy to distribute

// Approach 1 for Creating a function 
// Syntax 
function functionName(arguments) { 
	// return statement if needed.
}

function printWelcome(){
	console.log('Welcome to Demo');
}

// Executing a function
// Syntax
functionName(parameters);

printWelcome(); => prints Welcome to Demo to the console.

function addition(x, y){
	var z = x + y;
	return z;
}
x and y are called arguments
addition(10, 20) 
10 and 20 are called parameters

addition(1) => NaN

NaN => Not a number

1 + undefined => NaN
1 - undefined => NaN
1 / undefined => NaN
1 * undefined => NaN

var a;
var b;
var c;

var d = a || b || c || 40;
d => 40 

c = 30;
d = a || b || c || 40;
d => 30

b = 20;
d = a || b || c || 40;
d => 20;

a = 10;
d = a || b || c || 40;
d => 10;

function subtraction(x, y) {
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x );
	console.log('y value is ' + y );
	var z = x - y;
	return z;
}
subtraction(10, 8) => 2
subtraction(10) => 10
subtraction() => 0
subtraction(10, 8, 2) => 2

Additional Params will be ignored 
10 is copied to x, 8 is copied to y and 2 is ignored.
Passing less Params will be considered as undefined in arguments.

// Creating a function - Approach 2
// Syntax 
var functionName = function(arguments){
	
}
Here function is created first and then it is set to variable ie functionName.

var multiplication = function(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
}

typeof => internal function present in browsers
	It returns type of value
	
Types
	String => typeof("Karthik")
	Number => typeof(10)
	Boolean => typeof(true)
	Undefined => typeof(m) => var m;
	Function => typeof(multiplication)
	
// Self Executing Function
	Function is created and executed 
	After execution, memory allocated for function is also cleared.
	Can return a value ie result
	
// Syntax
(function functionName() {})()

(function welcome() {
	console.log(' Welcome to Demo ');
})()

(function multiplication(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})();

// passing the values
(function multiplication(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})(10, 20);

var result = (function(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})(10, 20);

console.log(result) => 200
console.log(multiplication) => throws exception as resources are cleared automatically.

ternary operator 
var variable = condition ? value1 : value2;

if condition is true
	value1 is copied to variable
else 
	value2 is copied to variable
	
var x = 10 > 5 ? 1: 2;
x is 1

1 == 1 => true
1 == "1" => true
1 === "1" => false

== compares only value
=== compares both value and type

1 === parseInt("1") 

Type Converstions
parseInt("10") => 10
parseInt("10.8") => 10
parseFloat("10.8") => 10.8


function process(terminate) {
	console.log('Started');
	if(terminate){
    	console.log('Terminated');
		return;
	}
	console.log('End');
}

Here return is used to stop executing further lines

success cases => process(true)
failure cases => process(false), process(undefined), process(null)

// End - Day 1

// Start - Day 2

Object
	It is a key value pair
	key	- String - can access using . or []
		  Number - can access using [] only
	value - String
			Number
			Boolean
			function
			Object
We can use _ symbol in key as string 
	
// Sample object having name, age, city as keys
var neha = {
	name: 'Neha',
	age: 20,
	city: 'Hyderabad'
}

// Accessing the values is done using keys
neha.age
neha['age']

// Sample object having numbers as keys
var obj = {
	1: 'a',
	2: 'b'
}
obj[1] => a
obj.1 => throws exception

_ symbol in key as string 
var person = { 
	first_name: 'Karthik' 
}

// Adding or Updating key value pair

// if key doesnt exist, it will be added
neha.college = 'CRM'

// if key exists, value will be updated
neha.age = 30
neha['age'] = 30

deleting keys
delete neha.age
delete neha['college']


Real Use Cases
1. Solving collision of methods from multiple libraries

Assume we are including 2 libraries with in a project
// In Angular js library
function test() {
	console.log('Angular')
}

// In React js library
function test() {
	console.log('React')
}

function will be overridden as same name exists
so test() will return React

To solve this, we can use Object
var React = { 
	test: function() {
		console.log('React');
	}
}

var Angular = { 
	test: function() {
		console.log('Angular');
	}
}

// Sample Calculator Object
var calculator = {
	add: function(x, y) {
		return x + y;
	},
	sub: function(x, y) {
		x = x || 0;
		y = y || 0;
		return x - y;
	}
}
calculator.add(1, 2) => 3
calculator['add'](1, 2) => 3

// Nested Object
neha.address = {
	line1: 'Kukatpally',
	line2: '1/2/3'
}
To print Kukatpally to console
console.log(neha.address.line1)
console.log(neha.address['line1'])
console.log(neha['address']['line1'])
console.log(neha['address'].line1)

// Sample 
NIT.Calculator['Add'](1, 2, 3)

// After analyzing
var NIT = {
	Calculator: {
		Add: function(x, y, z) {
			return x + y + z;
		}
	}
}

2. Object as an function argument
	Advantages 
		order of params can be anything
		pass only the keys that are required
		can set default values

var printPerson = function (firstName, lastName, age){
	console.log(firstName + ' ' + lastName + ' ' + age);
}

if I want to pass only lastName and age
printPerson('', 'kumar', 20) => kumar 20

var printPerson2 = function(input){
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
if I want to pass only lastName and age
printPerson({ age: 20, lastName: 'kumar'}) => kumar 20

//Handling undefined for keys
var printPerson3 = function(input){
	input.firstName = input.firstName || '';
	input.lastName = input.lastName || '';
	input.age = input.age || '';
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
printPerson3({ age: 20 }); => 20
printPerson3({}) => prints empty
printPerson3() => throws exception as empty object is not passed, follow below approach to handle it

// Handling input even if we dont pass
var printPerson4 = function(input){
	input = input || {};
	input.firstName = input.firstName || '';
	input.lastName = input.lastName || '';
	input.age = input.age || '';
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
printPerson4(); => prints empty

// End - Day 2