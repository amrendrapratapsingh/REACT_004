// Start - Day 1

// Creating a variable
// Syntax
var variableName = defaultValue;

var x = 10;

Viewing the values inside a variable
// Approach 1
console.log(x); => It prints value to console
// Approach 2
alert(x); => It displays value in alert box

var y;
console.log(y) => it prints undefined ie defaultValue is undefined
y = 20;

function
	Block of code 
	Code is added for re-usability and easy to distribute

// Approach 1 for Creating a function 
// Syntax 
function functionName(arguments) { 
	// return statement if needed.
}

function printWelcome(){
	console.log('Welcome to Demo');
}

// Executing a function
// Syntax
functionName(parameters);

printWelcome(); => prints Welcome to Demo to the console.

function addition(x, y){
	var z = x + y;
	return z;
}
x and y are called arguments
addition(10, 20) 
10 and 20 are called parameters

addition(1) => NaN

NaN => Not a number

1 + undefined => NaN
1 - undefined => NaN
1 / undefined => NaN
1 * undefined => NaN

var a;
var b;
var c;

var d = a || b || c || 40;
d => 40 

c = 30;
d = a || b || c || 40;
d => 30

b = 20;
d = a || b || c || 40;
d => 20;

a = 10;
d = a || b || c || 40;
d => 10;

function subtraction(x, y) {
	x = x || 0;
	y = y || 0;
	console.log('x value is ' + x );
	console.log('y value is ' + y );
	var z = x - y;
	return z;
}
subtraction(10, 8) => 2
subtraction(10) => 10
subtraction() => 0
subtraction(10, 8, 2) => 2

Additional Params will be ignored 
10 is copied to x, 8 is copied to y and 2 is ignored.
Passing less Params will be considered as undefined in arguments.

// Creating a function - Approach 2
// Syntax 
var functionName = function(arguments){
	
}
Here function is created first and then it is set to variable ie functionName.

var multiplication = function(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
}

typeof => internal function present in browsers
	It returns type of value
	
Types
	String => typeof("Karthik")
	Number => typeof(10)
	Boolean => typeof(true)
	Undefined => typeof(m) => var m;
	Function => typeof(multiplication)
	
// Self Executing Function
	Function is created and executed 
	After execution, memory allocated for function is also cleared.
	Can return a value ie result
	
// Syntax
(function functionName() {})()

(function welcome() {
	console.log(' Welcome to Demo ');
})()

(function multiplication(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})();

// passing the values
(function multiplication(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})(10, 20);

var result = (function(x, y) {
	x = x || 1;
	y = y || 1;
	console.log(' x value is ' + x);
	console.log(' y value is ' + y);
	return x * y;
})(10, 20);

console.log(result) => 200
console.log(multiplication) => throws exception as resources are cleared automatically.

ternary operator 
var variable = condition ? value1 : value2;

if condition is true
	value1 is copied to variable
else 
	value2 is copied to variable
	
var x = 10 > 5 ? 1: 2;
x is 1

1 == 1 => true
1 == "1" => true
1 === "1" => false

== compares only value
=== compares both value and type

1 === parseInt("1") 

Type Converstions
parseInt("10") => 10
parseInt("10.8") => 10
parseFloat("10.8") => 10.8


function process(terminate) {
	console.log('Started');
	if(terminate){
    	console.log('Terminated');
		return;
	}
	console.log('End');
}

Here return is used to stop executing further lines

success cases => process(true)
failure cases => process(false), process(undefined), process(null)

// End - Day 1

// Start - Day 2

Object
	It is a key value pair
	key	- String - can access using . or []
		  Number - can access using [] only
	value - String
			Number
			Boolean
			function
			Object
We can use _ symbol in key as string 
	
// Sample object having name, age, city as keys
var neha = {
	name: 'Neha',
	age: 20,
	city: 'Hyderabad'
}

// Accessing the values is done using keys
neha.age
neha['age']

// Sample object having numbers as keys
var obj = {
	1: 'a',
	2: 'b'
}
obj[1] => a
obj.1 => throws exception

_ symbol in key as string 
var person = { 
	first_name: 'Karthik' 
}

// Adding or Updating key value pair

// if key doesnt exist, it will be added
neha.college = 'CRM'

// if key exists, value will be updated
neha.age = 30
neha['age'] = 30

deleting keys
delete neha.age
delete neha['college']


Real Use Cases
1. Solving collision of methods from multiple libraries

Assume we are including 2 libraries with in a project
// In Angular js library
function test() {
	console.log('Angular')
}

// In React js library
function test() {
	console.log('React')
}

function will be overridden as same name exists
so test() will return React

To solve this, we can use Object
var React = { 
	test: function() {
		console.log('React');
	}
}

var Angular = { 
	test: function() {
		console.log('Angular');
	}
}

// Sample Calculator Object
var calculator = {
	add: function(x, y) {
		return x + y;
	},
	sub: function(x, y) {
		x = x || 0;
		y = y || 0;
		return x - y;
	}
}
calculator.add(1, 2) => 3
calculator['add'](1, 2) => 3

// Nested Object
neha.address = {
	line1: 'Kukatpally',
	line2: '1/2/3'
}
To print Kukatpally to console
console.log(neha.address.line1)
console.log(neha.address['line1'])
console.log(neha['address']['line1'])
console.log(neha['address'].line1)

// Sample 
NIT.Calculator['Add'](1, 2, 3)

// After analyzing
var NIT = {
	Calculator: {
		Add: function(x, y, z) {
			return x + y + z;
		}
	}
}

2. Object as an function argument
	Advantages 
		order of params can be anything
		pass only the keys that are required
		can set default values

var printPerson = function (firstName, lastName, age){
	console.log(firstName + ' ' + lastName + ' ' + age);
}

if I want to pass only lastName and age
printPerson('', 'kumar', 20) => kumar 20

var printPerson2 = function(input){
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
if I want to pass only lastName and age
printPerson({ age: 20, lastName: 'kumar'}) => kumar 20

//Handling undefined for keys
var printPerson3 = function(input){
	input.firstName = input.firstName || '';
	input.lastName = input.lastName || '';
	input.age = input.age || '';
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
printPerson3({ age: 20 }); => 20
printPerson3({}) => prints empty
printPerson3() => throws exception as empty object is not passed, follow below approach to handle it

// Handling input even if we dont pass
var printPerson4 = function(input){
	input = input || {};
	input.firstName = input.firstName || '';
	input.lastName = input.lastName || '';
	input.age = input.age || '';
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}
printPerson4(); => prints empty

var printPerson5 = function(input){
	input =  input || {};
	input.firstName = input.firstName || 'Guest';
	input.lastName = input.lastName || 'User';
	input.age = input.age || '0';
	console.log(input.firstName + ' ' + input['lastName'] + '' + input.age);
}

using Object as return type
function getPerson2() {
	return { name: 'Jhansi', age: 30 }
}

console.log(NIT.Admin.GetAccount('Keerthi')['FullName'].FirstName);

var NIT = {
	Admin: {
		GetAccount: function(name){
			//
			//
			//
			
			return {
				FullName: {
					FirstName: 'Jhansi'
				}
			}
		}
	}
}

console.log(NIT.Admin.GetAccount({ name:'Keerthi'} )['FullName'].FirstName);

// End - Day 2

// Start - Day 3

// Arrays - Collection
	- its a object where keys are numeric and starts with 0 key ie index.

var students = [];

// Array of Strings
students = [ 'Karthik', 'Deepthi', 'Venkat', 'Rakesh' ];


// Adding item to array
students.push('Neha');

// Removing item in array
var item = students.pop();

// Printing Array
// Approach 1
students[0] => "Karthik"
students[1] => "Deepthi"
students[2] => "Venkat"
students[3] => undefined
students[4] => undefined

Exception is not occurred even though we are looking for item where index doesnt exist.

// Approach 2
using for 
for(var index = 0; index < students.length; index++){
	var student = students[index];
	console.log(index);
	console.log(student);
}

// Approach 3
using for in -- Iteration is done with Index
for(var index in students){
	var student = students[index];
	console.log(index);
	console.log(student);
}

// Approach 4
using for of 
for(var student of students){
	console.log(student);
}

// Array of Objects
var persons = [
	{ name: 'Karthik', age: 20, city: 'Hyderabad' },
	{ name: 'Keerthi', age: 20, city: 'Hyderabad' },
	{ name: 'Pankaj', age: 2, city: 'Delhi' },
	{ name: 'Neha', age: 20, city: 'Hyderabad' },
	{ name: 'Deepak', age: 23, city: 'Delhi' }
];

for(var person of persons) {
	console.log(person.name + ' has age ' + person.age + ' is from ' + person.city);
}

// Array of numbers
var numbers = [1, 2, 3, 4, 5];

var sum = 0;
for(var number of numbers) {
	sum = sum + number;
}
console.log(sum);

// Array of different types
var array = [ 1, "Hello", true, undefined, null, function(x, y) { return x + y } ];

// printing types
for(var item of array){
	console.log(typeof(item));
}

// triggering function from array item
array[5](1, 2) => 3

var person = {
	firstName: 'Karthik',
	lastName: 'Reddy'
}

// finding or printing the keys of object

// Approach 1
for(var key in person) {
	console.log(key);
}

// Approach 2
var keys = Object.keys(person);
for(var key of keys) {
	console.log(key);
}

neha.address = [ { line1: 'Kukatpally', line2: 'Hyd' }, { line2: 'Delhi'}];

// To Print Kukatpally
neha.address[0].line1
neha.address[0]['line1']

var prashanth = {
	name: 'Prashanth',
	age: 20
	city: 'Hyderabad',
	creditCard: '123'
}

var preethi = {
	name: 'Preethi',
	age: 20
	city: 'Delhi',
	creditCard: '456'
}

// Class
	Data Hiding/Security
	Code Redundancy
	Inheritance
	Constructor
	
// Approach 1 - Creating a class
// Syntax

function className(args) {
	// private variables/methods
	// global variables/methods
	
	return {
		// public variables/methods
	}
}

var className = function(args) {
	// private variables/methods
	// global variables/methods
	
	return {
		// public variables/methods
	}
}

var Student = function() {
	return {
		name: '',
		age: 0,
		city: ''
	}
}

var prashanth = new Student();
var neha = new Student();


// constructor pattern => passing the values while initialization
var Student2 = function(arg_name, arg_age, arg_city) {
	return {
		name: arg_name,
		age: arg_age,
		city: arg_city
	}
}
var prashanth = new Student2('Prashanth', 20, 'Hyderabad');
var preethi = new Student2('Preethi', 20, 'Delhi');

// object as a constructor
var Student3 = function(options) {
	return {
		name: options.name,
		age: options.age,
		city: options.city
	}
} 
var prashanth = new Student3( { age: 20, city: 'Hyderabad', name: 'Prashanth' });
var preethi = new Student3( { name: 'Preethi', age: 20, city: 'Delhi')};

var Student4 = function(options) {
	options = options || {};
	options.name = options.name || 'Guest';
	options.city = options.city || 'Hyderabad';
	options.age = options.age || '';
	
	return {
		name: options.name,
		age: options.age,
		city: options.city
	}
}
var lakshman = { name: "Lakshman", age: 20};

var str = JSON.stringify(lakshman);

JSON.stringify => converts object to string. usually we send data to backend in string format. => Encoding


var obj = JSON.parse(str);

console.log(JSON.parse(str).age);

JSON.parse => converts string to object. usually backend api returns string format. In order to access/print any values(age, name) => need to convert to object format => decoding

var JSON = {
	parse: function(input) {
	
	},
	stringify: function(input) {
	
	}
}

// End - Day 3

// Start - Day 4

field/property/variable
method/function/api

Naming Conventions

Camel Case => starts with LowerCase letter and have HigherCase letter for every word. scientificCalcularor => ex: functions, objects

Variable Case => starts with HigherCase letter and have HigherCase letter for every word. ScientificCalcularor => ex: class

LowerCase => All letters will be in lower case => scientificcalcularor => ex: variables

Higher Case => All letters will be in higher case => SCIENTIFICCALCULATOR => ex constants

function vs class
class => variable case
		must return atleast one public function.
		

var Student = function(options) {
	options = options || {};
	options.firstName = options.firstName || '';
	options.lastName = options.lastName || '';
	
	// fullName is private field
	var fullName = options.firstName + ' ' + options.lastName;
	
	return {
		getName: function(){
			return fullName;
		}
	};
}

var satya = new Student( { firstName : 'Satya', lastName: 'Kumar' });
satya.getName() => Satya Kumar

function Calculator(){
	// private function
	var printToConsole = function(result) {
		console.log('Result is ' + result );
	}
	return {
		add: function(x, y) {
			var z = x + y;
			printToConsole(z);
			return z;
		},
		sub: function(x, y) {
			var z = x - y;
			printToConsole(z);
			return z;
		}
	}
}

// private functions and fields have to be consumed in any public functions else there is no use of creating them.

c1.add(1, 2) => Result is 3

// Any public variable/function can be overridden with in the instance but it will not affect other instances 

var Welcome = function() {
	return {
    	hello: function() {
			console.log('Welcome to demo');
		}
	}
}
var s1 = new Welcome();
s1.hello(); => Welcome to demo

var s2 = new Welcome();
s2.hello(); => Welcome to demo

// override hello
s2.hello = function() { console.log( 'Welcome to Overided Demo ' ); }
s2.hello(); => Welcome to Overided Demo
// Other instances are not affected
s1.hello(); => Welcome to demo

var s3 = new Welcome();
s3.hello(); => Welcome to demo

var ScientificCalculator = function() {
	
	// global variable
	pi = 3.14;
	
	// global function
	getBrowser = function(){
		console.log('Chrome');
	}
	
	// private variable
	var code = '123456';

	// private function
	var printToConsole = function(result) {
		console.log('Result is ' + result );
	}
	return {
		version: 1.0, // public variable
		add: function(x, y) {
			var z = x + y;
			printToConsole(z);
			return z;
		},
		sub: function(x, y) {
			var z = x - y;
			printToConsole(z);
			return z;
		},
		area: function(x, y) {
			console.log('Need to be Implemented');
		}
	}
}

var sci1 = new ScientificCalculator();

// We must create at least one object in order to access global variable/function.

pi => 3.14
getBrowser() => Chrome


// We can create a object variable and then return it
var ScientificCalculator2 = function() {
	
	// global variable
	pi = 3.14;
	
	// global function
	getBrowser = function(){
		console.log('Chrome');
	}
	
	// private variable
	var code = '123456';

	// private function
	var printToConsole = function(result) {
		console.log('Result is ' + result );
	}
	
	var my = {
		version: 1.0, // public variable
		add: function(x, y) {
			var z = x + y;
			printToConsole(z);
			return z;
		},
		sub: function(x, y) {
			var z = x - y;
			printToConsole(z);
			return z;
		},
		area: function(x, y) {
			console.log('Need to be Implemented');
		}
	};
	
	return my;
}

// scope/context => scope refers the current instance/object

var lavanya = {
	name: 'Lavanya',
	getName: function(){
    	return lavanya.name;
	}
}

// using scope/context
var lavanya = {
	name: 'Lavanya',
	getName: function(){
    	return this.name;
	}
}

var component = {
	name: 'Prakash',
	feature: {
    	name: 'Kumar',
		getName: function() {
			return this.name;
        }
	},
	getName: function() {
    	return this.name;
	}
}

component.getName() => Prakash
component.feature.getName() => Kumar

-- End - Day 4

// End - Day 3