Babel is a plugin to covert latest standards into es5/old standard.

ES6
We can use ES6 standards in a html using babel plugin

https://babeljs.io/

Code Testing Purpose
https://babeljs.io/repl/#?babili=false&browsers=&build=&builtIns=false&code_lz=MYGwhgzhAEAKCmAnCB7AdtA3gKAL5A&debug=false&forceAllTransforms=false&shippedProposals=false&circleciRepo=&evaluate=false&fileSize=false&lineWrap=true&presets=es2015%2Creact%2Cstage-2&prettier=false&targets=&version=6.26.0&envVersion=


Creating Class

Pure Javascript
function Person {
	
}

ES6
class Person {
}


Pure Javascript
function Calculator() {
	return {
		add: function(x, y) {
			return x + y;
		},
		sub: function(x, y) {
			return x - y;
		}
	}
}

ES6
class Calculator {
	add(x, y) {
    	return x + y;
    }
	sub(x, y) {
    	return x - y;
    }
}

Constructor Pattern
Pure Javascript
var Person = function(options){
}

ES6 
class Person {
    constructor(options) {
    }
}

Pure Javascript
var Student = function(props){
	this.getFullName = function(){
    	return props.firstName + ' ' + props.lastName;
	}
}

ES6
class Student {
	constructor(props) {
    	this.firstName = props.firstName;
		this.lastName = props.lastName;
	}
	getFullName() {
    	return this.firstName + '' + this.lastName;
	}
}

class Student {
	constructor(props) {
    	this.props = props;
	}
	getFullName() {
    	return this.props.firstName + '' + this.props.lastName;
	}
}

Inheritance Sample in ES6
class Father {
	getName(){
    	return "Rakesh";
	}
	getGender(){
    	return "M";
	}
}
class Son extends Father {
	getName(){
		return "Venkat";
	}

	getCity() {
		return "Hyderabad";
	}	
}

var s1 = new Son();

s1.getCity() => "Hyderabad"
s1.getName() => "Venkat"
s1.getGender() => "M"


Static Methods in ES6
class Person {
	getAge() { return 10; }
	static getType() { return "Person" }
}

Person.getType() => Person

var p1 = new Person()
p1.getAge() => 10
p1.getType() => VM175:1 Uncaught TypeError: p1.getType is not a function at <anonymous>:1:4

Constant Variable => Cant update
const pi = 3.14
pi = 4; => VM183:1 Uncaught TypeError: Assignment to constant variable. at <anonymous>:1:4


Class => Person
Field => age

if age is public => p1.age
if age is private => p1.age => undefined
if age is global => age
if age is static => Person.age
if age is const => age => age = 20 => throws exception.

var vs const
var => can access, update
const => can access, cant update

Hoisting => its a principle where variable declaration happens in first line of function even though variable is declared in 100th or any other line.. ie declarations are moved to top of a function.

function test(){
	console.log(pet);
}
test() => throws exception with undefined

function test1(){
	console.log(pet);
	var pet = 20;
}
test1() => prints undefined as it supports hoisting

// use let keyword inorder to avoid hoisting.
function test2(){
	console.log(pet);
	let pet = 20;
}
test2() => throws exception

var vs let
var => supports hoisting
let => Not supports hoisting


add(10, 20) => 30
add(10)(20) => 30

// use below approach for function overloading
function add(x, y) {
	console.log('x', x);
	console.log('y', y);
	if(arguments.length == 2){
		return x + y;
	} else {
		return function(z){
			console.log('x', x);
			console.log('y', y);
			console.log('z', z);
			return x + z;
		}
	}
}

add(10)(20)(30)
function add(a, b) {
	console.log('a', a);
	console.log('b', b);
	if(arguments.length == 2){
		return a + b;
	} else {
		return function(c){
			console.log('a', a);
			console.log('b', b);
			console.log('c', c);
			return function(d) {
				return d + c + a;
			}
		}
	}
}

CallBack Function => It is a function that is passed as an input to the function where it is triggered with in called function.

function add(x, y, callback) {
	var z = x + y;
	callback(z);
}

add(1, 2, function(value) { 
	console.log('Result is ' + value );
});

function print(result){
	console.log('result is '+ result);
}
add(1, 2, print);

var students = [
	{ name: 'Bharath', age: 20, city: 'Hyderabad'},
	{ name: 'Venkat', age: 25, city: 'Hyderabad'},
	{ name: 'Kavya', age: 30, city: 'Hyderabad'},
	{ name: 'Meetu', age: 21, city: 'Delhi'},
	{ name: 'Prasad', age: 2, city: 'Delhi'}
];

function welcome(){
	for(var student of students) {
		console.log(' Welcome to ' + student.name + ', ' + student.age + ', ' + student.city);
	}
}

function printDetails(){
	for(var student of students) {
		console.log( student.name + ' with age ' + student.age + ' is from ' + student.city);
	}
}

function forEach(items, callback){
	for(var item of items) {
		callback(item);
	}
}

// welcome
forEach(students, function(student) {
	console.log(' Welcome to ' + student.name + ', ' + student.age + ', ' + student.city);
});

// printDetails
forEach(students, function(student) {
	console.log( student.name + ' with age ' + student.age + ' is from ' + student.city);
});

Array.prototype.forEachItem = function(callback){
	for(var item of this) {
		callback(item);
	}
}

// welcome
students.forEachItem(function(student) {
	console.log(' Welcome to ' + student.name + ', ' + student.age + ', ' + student.city);
});

// printDetails
students.forEachItem(function(student) {
	console.log( student.name + ' with age ' + student.age + ' is from ' + student.city);
});

filterStudentsByAge > 20
function filterStudentsByAge(age) {
	var filteredItems = [];
	for(var student of students){
		if(student.age > age) {
			filteredItems.push(student);
		}
	}
	return filteredItems;
}

function filterStudentsByCity(city) {
	var filteredItems = [];
	for(var student of students){
		if(student.city == city) {
			filteredItems.push(student);
		}
	}
	return filteredItems;
}

function filterBy(callback){
	var filteredItems = [];
	for(var student of students){
		if(callback(student)) {
			filteredItems.push(student);
		}
	}
	return filteredItems;
}

filterStudentsByAge > 20
filterBy(function(student) {
	return student.age > 20;
});

filterStudentsByCity
filterBy(function(student) {
	return student.city == 'Hyderabad';
});

Array.prototype.filterBy = function(callback) {
	var filteredItems = [];
	for(var item of this){
		if(callback(item)) {
			filteredItems.push(item);
		}
	}
	return filteredItems;
}
filterStudentsByAge > 20
students.filterBy(function(student) {
	return student.age > 20;
});

filterStudentsByCity
students.filterBy(function(student) {
	return student.city == 'Hyderabad';
});

students.filter( function(student) { return student.city == 'Hyderabad'}).filter(function(student) { return student.age > 20 }).forEach(function(student) { console.log(student.name + ', ' + student.age + ', ' + student.city)});

Arrow Functions
var add = function(x, y) {
	return x + y;
}

var add = (x, y) => {
	return x + y;
}

var add = (x, y) => x + y;

students
	.filter(student => student.city == 'Hyderabad')
	.filter(student => student.age > 20)
	.forEach(student => console.log(student.name + ', ' + student.age + ', ' + student.city));


var condition = student => student.city == 'Hyderabad' && student.age > 20;
var print = student => console.log(student.name + ', ' + student.age + ', ' + student.city);
students.filter(condition).forEach(print);

https://www.w3schools.com/js/js_array_methods.asp
