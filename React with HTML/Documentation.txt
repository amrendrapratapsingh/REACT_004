React
	Original DOM
	Virtual DOM
	
Restaurants
	Krutunga
	Paradise
	Bawarchi
	
Befault => 
	data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' }
	]

Original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	
Virtual DOM => replica/clone of original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>

Step 1:
On click of refresh icon
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
data changed => state changed
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
	
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>				<div>Paradise</div>
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>

Step 2: Paradise is deleted
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>	

Step 2: Krutunga is updated to Kritunga
data = [
		{ id: 1, label: 'Kritunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Kritunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>	Updated  <=	<div>Kritunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>
						
In comparison,
	if it finds new node in virtual DOM => injected to Original DOM
	if it finds any missing node in virtual DOM => removed in Original DOM
	if it finds any updated node in virtual DOM => updates node in Original DOM

Libraries to Import
	React - React.createElement(type, attributes, innerhtml)
	ReactDOM - ReactDOM.render(what to render, where to render);

Adding Script to HTML
	In Header => loaded before body is rendered
	In Body => loaded after body is rendered
	

React.createElement('div', { id: 'div1', items: [ {}, {}]}, 'Welcome to Demo');
React.createElement('button', { id: ''}, 'Login')
React.createElement('textbox', { id: ''}, '')

JSX vs HTML

HTML => not  compiled
		pure html components
		

JSX => compiled
		jsx component => it will be converted into old format like (React.createElement), html components are generated dynamically
		
Important Points
	Use curly braces for variables with in jsx elements.
	
Creating React Component => Create a ES6 class which extends React.Component and implement the render method.


var students = [ 
	{ fn: 'Karthik', ln: 'Kumar'}, 
	{ fn: 'Venkat', ln: 'Reddy'},
	{ fn: 'Keerthi', ln: 'Reddy'},
	{ fn: 'Prakash', ln: 'Reddy'},
	{ fn: 'Meetu', ln: 'Reddy'}

]

var students2 = students.map( student => 
	{ 
		return { fullName: student.fn + ' ' + student.ln } 
	}
);

using styles
.red {
	color: 'red';
	align-items: left;
}

in HTML
<h1 style="color: 'red';align-items: left" />
<h1 class='red' />

CDN Links
https://reactjs.org/docs/cdn-links.html

in JSX
<h1 style={{ color: 'red', alignItems: 'left' }} />
<h1 class='red' />
Variables

Block Level => var name;
public => this.name
Props that component receives => this.props.name => Not to update
State Level => this.state.name

var a = 1
b = 2
c = 3
d = 4
e = 5

this.state = {
	a: 1,
	b: 2,
	c: 3,
	d: 4,
	e: 5
}

// updating state variables d to 10 e to 20
this.setState( { d: 10, e: 20 })

As values are changed, screen will update

// updating state variables d to 4 e to 5
this.setState( { d: 4, e: 5 })
As values are not changed, screen will not refresh

but In both cases virtual DOM is recreated.



Use of internal API filter

var students = [ 
	{ fn: 'Karthik', ln: 'Kumar'}, 
	{ fn: 'Venkat', ln: 'Reddy'},
	{ fn: 'Keerthi', ln: 'Reddy'},
	{ fn: 'Prakash', ln: 'Reddy'},
	{ fn: 'Meetu', ln: 'Reddy'}

]
students.filter( student => student.fn.indexOf('K') >= 0) 
results in  
[ 	{fn: "Venkat", ln: "Reddy"},
	{fn: "Prakash", ln: "Reddy"},
	{fn: "Meetu", ln: "Reddy"}
]

this.props => attributes component receives
this.props.children => innernodes component receives 
		useful to create master pages
		
Master Page => Fixed template
			We can have multiple master pages 

defaultProps => default attributes for the component.


// Cloning

var person = {
	fn: 'Karthik',
	age: 20,
	city: 'Hyderabad'
}

// Approach 1
var p2 = {};
for(var key in person) {
	p2[key] = person[key];
}

// Approach 2
var p3 = {...person}

// adding some more attributes for the cloned item.. and overiding age
//person.gender = 'm';
//person.address = 'Kukatpally';

var p4 = {...person, age: 22, gender: 'M', address: 'Kukatpally'}

var overided = {age: 22, gender: 'M', address: 'Kukatpally'}
var p5 = {...person, ...overided}

// Merging Objects

var obj1 = { a:1, b:2, c: 3}
var obj2 = { c: 4, e: 5}
var obj3 = { e: 6, f: 7, g: 8}

var obj = { ...obj1, ...obj2, ...obj3 }

obj will have all attributes ...

var person = {
	fn: 'Karthik',
	age: 20,
	city: 'Hyderabad',
	address: 'Ameerpet',
	creditNo: 123456
}
// Approach 1
var p2 = {};
for(var key in person) {
	if(key != 'age' && key != 'creditNo'){
		p2[key] = person[key];
	}
}

var { age, creditNo, ...p3 } = {...person}

var { age, creditNo, ...p4 } = {state:'Telangana', ...person}

// age and creditNo values are copied to Age, CreditNumber and age, creditNo are undefined


var { age: Age, creditNo: CreditNumber, ...p5 } = {state:'Telangana', ...person}

var students = [ 'Neha', 'Prakash', 'Deepthi']

// Applyging ... to Arrays
var students2 = [...students, 'Navya', 'Venkat']


JSX will automatically remove whitespace on the beginning and ending of a line as well as blank lines. 
It also condenses blank lines in the middle of string literals into one space.


	<Grid>Hello world!</Grid>

	<Grid>
	  Hello world!
	</Grid>

	<Grid>
	  Hello
	  world!
	</Grid>

	<Grid>

	  Hello world!
	</Grid>

	
Item => 7
	props.children can be any type, 
		an array
		a function
		an object
		
	<MasterPage>
	  <h1>First</h1>
	  <h1>Second</h1>
	</MasterPage>
	
	
	<MasterPage>
	  {() => <h1>First</h1>}
	</MasterPage>
	
	<MasterPage>
	  {"Red"}
	</MasterPage>

Approach 1
	{this.props.children}

Approach 2
	{React.Children.map(children, (child, i) => {
	  return child;
	})}

Advantage:
	{React.Children.map(children, (child, i) => {
	  // Ignore the first child
	  if (i < 1) return
	  return child
	})}

Other API's

API => React.Children.count
React.Children.count(this.props.children) => renders number of elements passed.
	
	class ChildrenCounter extends React.Component {
	  render() {
		return <p>React.Children.count(this.props.children)</p>
	  }
	}
	
API => React.cloneElement
	React elements are immutable(cant be updated).
	var newElement = React.cloneElement(element, {
	  country: 'India'
	});
	
Other Samples - https://reactjs.org/docs/react-api.html


<BrowserHistory>
	<Login>
	<Home>
</BrowserHistory>

class BrowserHistory {
	constructor(props){
		this.state = {
			history: new HistoryObject()
		}
	}
	render(){
		return (
			<div>
				{
					React.Children.map(this.props.children, child => {
						return React.cloneElement(child, {
						  history: this.state.history
						})
					})
				}
			</div>
		);
	}
}

class Login extends React.Component {
	onLoginClick(){
		this.props.history.push('/home');
	}
	render(){
		return (
			<div>
				Welcome to Login
				<input type="button" value="Login" onClick="onLoginClick" />
			</div>
		);
	}
}
class Home extends React.Component {
	render(){
		return (
			<div> Welcome to Home Screen</div>
		);
	}
}






















