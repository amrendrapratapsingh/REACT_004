React
	Original DOM
	Virtual DOM
	
Restaurants
	Krutunga
	Paradise
	Bawarchi
	
Befault => 
	data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' }
	]

Original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	
Virtual DOM => replica/clone of original DOM
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>

Step 1:
On click of refresh icon
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 2, label: 'Paradise' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
data changed => state changed
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Paradise</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
	
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>				<div>Paradise</div>
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>

Step 2: Paradise is deleted
data = [
		{ id: 1, label: 'Krutunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Krutunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>				<div>Krutunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>	

Step 2: Krutunga is updated to Kritunga
data = [
		{ id: 1, label: 'Kritunga' },
		{ id: 3, label: 'Bawarchi' },
		{ id: 4, label: 'Ohris' }
	]
Virtual DOM is recreated.
Virtual DOM =>
	<div>Kritunga</div>
	<div>Bawarchi</div>
	<div>Ohris</div>
Starts comparison with original DOM
	<div>Krutunga</div>	Updated  <=	<div>Kritunga</div>
	<div>Paradise</div>	Deleted  <=
	<div>Bawarchi</div>				<div>Bawarchi</div>
						Injected <= <div>Ohris</div>
						
In comparison,
	if it finds new node in virtual DOM => injected to Original DOM
	if it finds any missing node in virtual DOM => removed in Original DOM
	if it finds any updated node in virtual DOM => updates node in Original DOM

Libraries to Import
	React - React.createElement(type, attributes, innerhtml)
	ReactDOM - ReactDOM.render(what to render, where to render);

Adding Script to HTML
	In Header => loaded before body is rendered
	In Body => loaded after body is rendered
	

React.createElement('div', { id: 'div1', items: [ {}, {}]}, 'Welcome to Demo');
React.createElement('button', { id: ''}, 'Login')
React.createElement('textbox', { id: ''}, '')

JSX vs HTML

HTML => not  compiled
		pure html components
		

JSX => compiled
		jsx component => it will be converted into old format like (React.createElement), html components are generated dynamically
		
Important Points
	Use curly braces for variables with in jsx elements.
	
Creating React Component => Create a ES6 class which extends React.Component and implement the render method.


var students = [ 
	{ fn: 'Karthik', ln: 'Kumar'}, 
	{ fn: 'Venkat', ln: 'Reddy'},
	{ fn: 'Keerthi', ln: 'Reddy'},
	{ fn: 'Prakash', ln: 'Reddy'},
	{ fn: 'Meetu', ln: 'Reddy'}

]

var students2 = students.map( student => 
	{ 
		return { fullName: student.fn + ' ' + student.ln } 
	}
);

using styles
.red {
	color: 'red';
	align-items: left;
}

in HTML
<h1 style="color: 'red';align-items: left" />
<h1 class='red' />

CDN Links
https://reactjs.org/docs/cdn-links.html

in JSX
<h1 style={{ color: 'red', alignItems: 'left' }} />
<h1 class='red' />
Variables

Block Level => var name;
public => this.name
Props that component receives => this.props.name => Not to update
State Level => this.state.name

var a = 1
b = 2
c = 3
d = 4
e = 5

this.state = {
	a: 1,
	b: 2,
	c: 3,
	d: 4,
	e: 5
}

// updating state variables d to 10 e to 20
this.setState( { d: 10, e: 20 })

As values are changed, screen will update

// updating state variables d to 4 e to 5
this.setState( { d: 4, e: 5 })
As values are not changed, screen will not refresh

but In both cases virtual DOM is recreated.



Use of internal API filter

var students = [ 
	{ fn: 'Karthik', ln: 'Kumar'}, 
	{ fn: 'Venkat', ln: 'Reddy'},
	{ fn: 'Keerthi', ln: 'Reddy'},
	{ fn: 'Prakash', ln: 'Reddy'},
	{ fn: 'Meetu', ln: 'Reddy'}

]
students.filter( student => student.fn.indexOf('K') >= 0) 
results in  
[ 	{fn: "Venkat", ln: "Reddy"},
	{fn: "Prakash", ln: "Reddy"},
	{fn: "Meetu", ln: "Reddy"}
]





